<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">

   <resultMap id="memberResult" type="Member">
      <result column="mem_no" property="memNo"/>
      <result column="mem_id" property="memId"/>
      <result column="mem_pwd" property="memPwd"/>
      <result column="mem_name" property="memName"/>
      <result column="email" property="email"/>
      <result column="phone" property="phone"/>
      <result column="mem_class_code" property="memClassCode"/>
      <result column="sns_key" property="snsKey"/>
      <result column="status" property="status"/>
      <result column="online_st" property="onlineSt"/>
      <result column="admin_yn" property="adminYN"/>
      <result column="profile_url" property="profileURL"/>
   </resultMap>
   
   <resultMap id="classesResult" type="Classes">
      <result column="class_code" property="classCode"/>
      <result column="class_name" property="className"/>
   </resultMap>

   <select id="loginMember" resultMap="memberResult">
      <!-- 암호화 작업 전에 했던 방식
      select
             user_id
           , user_pwd
           , user_name
           , email
           , gender
           , age
           , phone
           , address
           , enroll_date
           , modify_date
           , status
        from member
       where status = 'Y'
         and user_id = #{userId}
         and user_pwd = #{userPwd}
       -->
      select
             mem_no
           , mem_id
           , mem_pwd
           , mem_name
           , email
           , phone
           , mem_class_code
           , sns_key
           , status
           , online_st
           , admin_yn
           , profile_url
        from member
       where status = 'Y'
         and mem_id = #{memId}
   </select>

   <insert id="insertMember">
      insert
        into member
            (
              mem_no
           , mem_id
           , mem_pwd
           , mem_name
           , phone
           , email
           , mem_class_code
           , admin_yn
           )
      values
          (
            seq_mem_no.nextval
          , #{memId}
          , #{memPwd}
          , #{memName}
          , #{phone}
          , #{email}
          , #{memClassCode}
          , #{adminYN}
          )
   </insert>
   
   <select id="selectClassCode" resultType="_int">
      select
             count(*)
        from class
       where class_code = #{classCode}
   </select>
   
   <update id="updateMember">
      update member
         set user_name = #{userName}
           , email = #{email}
           , age = #{age}
           , phone = #{phone}
           , address = #{address}
           , gender = #{gender}
           , modify_date = sysdate
        where user_id = #{userId}   
   </update>
   
   <update id="deleteMember">
      update member
         set status = 'N'
       where user_id = #{userId}
   </update>
   
   <select id="idCheck" resultType="_int">
      select
            count(*)
         from member
        where mem_id = #{checkId}
   </select>
   
   <!-- 클래스 이름 포함 모든 맴버 조회 -->
   <select id="selectMemberList" resultMap="memberResult">
   select
          mem_no
        , mem_id
        , mem_pwd
        , mem_name
        , email
        , phone
        , mem_class_code
        , sns_key
        , status
        , online_st
        , admin_yn
     from member
     join class on (mem_class_code = class_code)
    where status = 'Y'
      and mem_class_code = #{classCode}
   </select>
   
   <!-- 클래스 조회 -->
   <select id="selectClass" resultMap="classesResult">
   select
          distinct 
          class_code
        , class_name
     from member
     join class on (mem_class_code = class_code)
    where status = 'Y'
    order
       by class_name asc
   </select>

   <update id="online">
   update member
      set online_st = 'Y'
    where mem_id = #{memId}
   </update>

   <update id="offline" parameterType="Member">
   update member
       set online_st = 'N'
    where mem_id = #{memId}
   </update>
   
   <select id="selectFriendList" resultMap="memberResult">
   select 
          mem_no
        , mem_id
        , mem_pwd
        , mem_name
        , email
        , phone
        , mem_class_code
        , sns_key
        , status
        , online_st
        , admin_yn
        , profile_url
     from member
     join friends on (to_mem = mem_no)
    where are_we_friend = 'Y'
      and from_mem = #{memId}
   </select>
   
   <select id="selectWaitingList" resultMap="memberResult">
   select 
          mem_no
        , mem_id
        , mem_pwd
        , mem_name
        , email
        , phone
        , mem_class_code
        , sns_key
        , status
        , online_st
        , admin_yn
        , profile_url
     from member
     join friends on (to_mem = mem_no)
    where are_we_friend = 'N'
      and RECEIVER = #{memNo}
      and from_mem = #{memNo}
   </select>
   
   <select id="findId" resultMap="memberResult">
	select
	       mem_id
	  from member
	 where mem_name = #{memName}
	   and email = #{email}
   </select>
   
    <select id="findPwd" resultMap="memberResult">
	select
	       mem_pwd
	  from member
	 where mem_name = #{memName}
	   and mem_id = #{memId}
	   and email = #{email}
   </select>
   
   <update id="findUpdatePwd" parameterType="Member">
   update member
      set mem_pwd = #{memPwd}
    where mem_id = #{memId}
   </update>
   
	<update id="acceptFriend" parameterType="Friend">
	    UPDATE FRIENDS
	    SET ARE_WE_FRIEND = 'Y'
	    WHERE (FROM_MEM = #{fromMem} AND TO_MEM = #{toMem})
	       OR (FROM_MEM = #{toMem} AND TO_MEM = #{fromMem})
	</update>
	
	<delete id="rejectFriend" parameterType="map">
	    DELETE FROM FRIENDS
	    WHERE (FROM_MEM = #{fromMem} AND TO_MEM = #{toMem})
	       OR (FROM_MEM = #{toMem} AND TO_MEM = #{fromMem})
	</delete>
</mapper>
